<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_dude_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>s_dude_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player Variables

PLAYER_NUMBER = 1;     // The number of the player. 

dir = 1;               // Player direction. 1 = right, -1 = left.
xspeed = 0.0;          // Horizontal speed.
yspeed = 0.0;          // Vertical speed.
xmaxspeed = 4.0;       // Horizontal speed limit.
ymaxspeed = 10.0;      // Vertical speed limit.

weight = 0.4;          // How fast the player falls.
accel = 0.5;           // How fast the player accelerates horizontally.
xfriction = 0.5;       // How fast the player decelerates horizontally.
jumpHeight = 6.5;      // How high the player jumps.

maxDoubleJumps = 0;    // Number of possible additional jumps. 
availableJumps = 0;    // Number of available additional jumps.
canDoubleJump = false; // Whether or not player can do an additional jump.
canWalljump = true;    // Whether or not player can walljump.

isClimbing = false;    // Whether or not player is climbing.
isJumping = false;     // Whether or not player is jumping.
isDismounting = false; // Whether or not player is dismounting a ladder.
isWallsliding = false; // Whether or not player is sliding down a wall.

aiming_max = 60;       // Max number of aiming frames.
dismount_max = 20;     // Max number of ladder dismounting frames.
landing_max = 10;      // Max number of landing frames.

aiming = 0;            // Remaining number of aiming frames.
dismount = 0;          // Remaining number of ladder dismounting frames.
landing = 0;           // Remaining number of landing frames.
firing = 0;            // Remaining number of firing frames.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player Logic

// VELOCITY HANDLING ==================================================

// Clamp velocities.
xspeed = iff(abs(xspeed) &gt; xmaxspeed, xmaxspeed * sign(xspeed), xspeed);
yspeed = iff(abs(yspeed) &gt; ymaxspeed, ymaxspeed * sign(yspeed), yspeed);

// Vertical velocity:
if (!place_meeting(x, y + yspeed, o_block)) {
  y += yspeed;
}
else {
  // Landing.
  if (yspeed &gt; 0) {
    isClimbing = false;
    isJumping = false;
    isDismounting = false;
    landing = landing_max;
    dismount = dismount_max;
    y = floor(y);
  }
  move_contact_solid(point_direction(x, y, x, y + yspeed), yspeed);
  yspeed = 0;
}

// Horizontal velocity:
if (!place_meeting(x + xspeed, y, o_block)) {
    x += xspeed;
} 
else {
  move_contact_solid(point_direction(x, y, x + xspeed, y), xspeed);
  xspeed = 0;
}

// Limit position within room.
if (x &lt; 0) x = 0;
if (x &gt; room_width) x = room_width;

// PLAYER MOVEMENT ==================================================

isWallsliding = false;

if (isClimbing == false) {
  
  // Handle directions.
  if (key_check(K_LEFT, E_PRESS) || (key_check(K_LEFT, E_DOWN) &amp;&amp; key_check(K_RIGHT, E_RELEASE))) {
    dir = -1;
  }
  if (key_check(K_RIGHT, E_PRESS) || (key_check(K_RIGHT, E_DOWN) &amp;&amp; key_check(K_LEFT, E_RELEASE))) {
    dir = 1; 
  }
  
  // Jumping from air:
  if (!place_meeting(x, y+1, o_block)) {
    yspeed += weight;
    if (!key_check(K_JUMP, E_DOWN)) {
      canDoubleJump = true;
    }
    // Wall jump.
    if (canWalljump &amp;&amp; key_check(K_JUMP, E_PRESS)) {
      if (place_meeting(x+4, y, o_block)) {
        xspeed = -xmaxspeed;
        yspeed = -jumpHeight;
        isJumping = true;
      }
      if (place_meeting(x-4, y, o_block)) {
        xspeed = xmaxspeed;
        yspeed = -jumpHeight;
        isJumping = true;
      }
    }
    // Wall slide.
    if (place_meeting(x+4, y, o_block) &amp;&amp; key_check(K_RIGHT, E_DOWN) ||
        place_meeting(x-4, y, o_block) &amp;&amp; key_check(K_LEFT, E_DOWN)) {
      if (yspeed &gt; ymaxspeed / 6) {
        isWallsliding = true;
        aiming = 0;
        firing = 0;
        yspeed = ymaxspeed / 6;
      }
    }
    // Double jump.
    else if (availableJumps &gt; 0 &amp;&amp; key_check(K_JUMP, E_PRESS) &amp;&amp; canDoubleJump == true) {
      availableJumps -= 1;
      yspeed = -jumpHeight;
      xspeed = xmaxspeed * (0 - key_check(K_LEFT, E_DOWN) + key_check(K_RIGHT, E_DOWN));
      isJumping = true;
    }
    // Jump cancel.
    if (!key_check(K_JUMP, E_DOWN) &amp;&amp; isJumping &amp;&amp; (yspeed &lt; -jumpHeight / 2)) {
      yspeed = -jumpHeight / 2;
    }
  }
  // Jumping from ground.
  else {
    availableJumps = maxDoubleJumps;
    canDoubleJump = false;
    if (key_check(K_JUMP, E_PRESS)) {
      yspeed = -jumpHeight;
      xspeed = xmaxspeed * (0 - key_check(K_LEFT, E_DOWN) + key_check(K_RIGHT, E_DOWN));
      isJumping = true;
    }
  }

  // Horizontal acceleration.
  if (key_check(K_LEFT, E_DOWN) &amp;&amp; xspeed &gt; -xmaxspeed &amp;&amp; dir == -1) {
    xspeed -= accel;
  }
  if (key_check(K_RIGHT, E_DOWN) &amp;&amp; xspeed &lt; xmaxspeed &amp;&amp; dir == 1) {
    xspeed += accel;
  }
  
  // Horizontal friction.
  if (!key_check(K_LEFT, E_DOWN) &amp;&amp; !key_check(K_RIGHT, E_DOWN)) {
    if (abs(xspeed) &gt; xfriction) {
      xspeed -= sign(xspeed) * xfriction;
    } else {
      xspeed = 0;
    }
  }
  
  // Climbing on to ladder.
  if (place_meeting(x, y, o_ladder) &amp;&amp; !isDismounting) {
    if (key_check(K_UP, E_DOWN) &amp;&amp; place_meeting(x, y-8, o_ladder)) {
      isClimbing = true;
    }
    if (key_check(K_DOWN, E_DOWN) &amp;&amp; place_meeting(x, y+8, o_ladder) &amp;&amp; !place_meeting(x, y+1, o_block)) {
      isClimbing = true;
    }
  }
}
// Movement on ladder:
else {
  // Stop climbing.
  if (!place_meeting(x, y, o_ladder)) {
    isClimbing = false;
  }
  
  // Handle direction.
  if (key_check(K_LEFT, E_PRESS)) {
    dir = -1;
  } 
  if (key_check(K_RIGHT, E_PRESS)) {
    dir = 1;
  }
  
  // Dismounting counter.
  if ((key_check(K_LEFT, E_DOWN) || key_check(K_RIGHT, E_DOWN)) &amp;&amp; yspeed == 0) {
    dismount -= 1;
  } else {
    dismount = dismount_max;
  }
  
  xspeed = 0;
  yspeed = 0;
  
  if (firing == 0) {
    // Go down the ladder.
    if (place_meeting(x, y+8, o_ladder) &amp;&amp; key_check(K_DOWN, E_DOWN)) {
      yspeed = 2.0;
      if (place_meeting(x, y+1, o_block)) {
        is_climbing = false;
      }
    }
    // Go up the ladder.
    if (place_meeting(x, y-8, o_ladder) &amp;&amp; key_check(K_UP, E_DOWN)) {
      yspeed = -2.0;
    }
    
  }
  
  // Cancel firing.
  if (key_check(K_UP, E_PRESS) || key_check(K_DOWN, E_PRESS)) {
    firing = 0;
  }
  
  // Dismounting.
  if (key_check(K_JUMP, E_PRESS) || dismount &lt;= 0) {
    isClimbing = false;
    isDismounting = true;
    if (dismount &lt;= 0) {
      xspeed = (xmaxspeed / 2) * dir;
    }
    if (!key_check(K_DOWN, E_DOWN)) {
      yspeed = -6;
    }
  }
}
    
// SHOOTING ==================================================

// Decrement counters.
if (firing &gt; 0) {
  firing -= 0.5; 
}

if (aiming &gt; 0) {
  aiming -= 1;
}

// Shooting.
if (key_check(K_FIRE, E_PRESS) &amp;&amp; !isWallsliding &amp;&amp; firing &lt; 6) {
  sprite_index = s_dude_gun_fire;
  firing = image_number;
  aiming = aiming_max;
  
  bullet = instance_create(x + dir*12, y-10, o_bullet);
  bullet.hspeed = 18.0 * dir;
  bullet.image_xscale = dir;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Image Handling

// Draw the appropriate sprites:
if (place_meeting(x, y+1, o_block)) {
  if (xspeed == 0) {
    // Idle.
    sprite_index = iff(aiming, s_dude_gun, s_dude_idle);
    if (aiming &amp;&amp; firing &gt; 0) {
      // Shooting.
      sprite_index = s_dude_gun_fire;
      image_index = image_number - firing;
    }
  }
  else {
    // Running.
    if (sign(xspeed) == sign(dir)) {
      sprite_index = iff(aiming, s_dude_gun_run, s_dude_run);
    }
    // Skidding.
    else {
      sprite_index = iff(aiming, s_dude_gun_skid, s_dude_skid);
    }
  }
}
else {
  // Jumping.
  sprite_index = iff(aiming, s_dude_gun_jump, s_dude_jump);
  image_index = 1 + sign(yspeed);
  if (abs(yspeed) &lt; 2) {
    image_index = 1;
  }
}
// Landing.
if (landing &gt; 0) {
  landing -= 1;
  sprite_index = iff(aiming, s_dude_gun_land, s_dude_land);
}
// Climbing.
if (isClimbing) {
  if (firing == 0) {
    sprite_index = s_dude_climb;
    if (dismount &lt; dismount_max &amp;&amp; yspeed == 0) {
      sprite_index = s_dude_climb_off;
    }
    if (!place_meeting(x, y-8, o_ladder)) {
      sprite_index = s_dude_climb_top;
    }
  } else {
    sprite_index = s_dude_climb_fire;
    if (!place_meeting(x, y-8, o_ladder)) {
      sprite_index = s_dude_climb_top_fire;
    }
  }
  image_index = floor(y/16); 
}

// Configure image speeds.
image_speed = 1.0;

if (sprite_index == s_dude_run || s_dude_gun_run) {
  image_speed = 0.2;
}

// Handle image direction.
image_xscale = dir;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,24</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
